import java.util.concurrent.ExecutionException
import java.util.concurrent.Future
import com.k_int.okapi.remote_resources.OkapiLookup
import groovy.transform.*
import groovyx.net.http.HttpException
import org.olf.oa.PublicationRequest
import groovy.transform.Field

def should_expand = [
  'requestStatus',
  'rejectionReason',
  'externalRequestIds',
  'fundings',
  'history',
  'publicationType',
  'correspondingAuthor',
  'requestContact',
  'identifiers',
  'publicationStatuses',
  'subtype',
  'publisher',
  'license',
  'correspondences'
]

@Field 
PublicationRequest publicationRequest

final String objectProperty = 'reference_object'
def remoteObjValue
if(publicationRequest.respondsTo(objectProperty)){
  try {
    remoteObjValue = publicationRequest.invokeMethod(objectProperty, null)
    if (remoteObjValue instanceof Future) {
      remoteObjValue = (remoteObjValue as Future)?.get()
    }
  } catch (ExecutionException e) {

    if (e.cause instanceof HttpException) {
      HttpException httpEx = e.cause as HttpException
      remoteObjValue = [error: httpEx.statusCode, message: httpEx.message ]
    } else {
      remoteObjValue = [error: e.class.name, message: e.message]
    }
  }
}

json g.render(publicationRequest, [expand: should_expand]) {
  'requestDate' publicationRequest.requestDate
  if (remoteObjValue) {
    call( objectProperty, remoteObjValue )
  }
}
